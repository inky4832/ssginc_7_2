html 강좌정리

1. web 아키텍쳐 ( web architecture )


 클라이언트(client:사용자)                         서버(server:클라이언트에게 서비스 기능 ) 예> 쿠팡,....
 -------------------                         ---------------------------------
 도구: 웹브라우저                                 도구: 웹서버(web server)
                     요청(url에 주소입력)
                   ------------------------->  요청에 대한 처리실행후 결과를 만듬.
		   <-------------------------
		     응답(html 결과를 리턴)
		                               웹컴포넌트(web component)
					       - html: *.html, 정적 컴포넌트(항상 결과가 동일)
					       - jsp : *.jsp, 동적 컴포넌트(결과가 달라짐), 자바기술
					       - servlet: *.java, 동적 컴포넌트(결과가 달라짐), 자바기술


 1) html 인 경우


     웹 브라우저    가.요청(test.html)        웹서버( Apache, IIS, ngnix,..)
             ------------------------>                           
					test.html

					나. 요청한 html 검색 
					  - 없는 경우: 404(File Not Found) 에러코드 발생되고
                                                    에러페이지(html)를 사용자에게 보내줌.
					  - 있는 경우: 찾은 test.html를 사용자에게 보내줌.
	     <-------------------------
	        다. 응답( test.html 다운 )

  라. test.html
    랜더링

   ==> html은 서버에 저장하지만 클라이언트(프런트엔드)에서 실행되고 정적인 특징을 갖는다.
      즉 항상 동일한 화면이 보여진다.


   2)  jsp 인 경우 ( 자바기술 )

      웹 브라우저    가.요청(test.jsp)        웹 컨테이너( Tomcat , 웹서버 기능 포함)
             ------------------------>                           
					test.jsp

					나. 요청한 jsp 검색 
					  - 없는 경우: 404(File Not Found) 에러코드 발생되고
                                                    에러페이지(html)를 사용자에게 보내줌.
					  - 있는 경우: 3가지 단계를 거침
                                              1단계: 변환단계
					         test.jsp ------> test_jsp.java

				              2단계: 컴파일 단계
					        test_jsp.java ------> test_jsp.class

                                              3단계: 실행 단계
                                                 test_jsp.class ---> 결과는 html로 만들어짐.
	     <-------------------------
	        다. 응답( html 다운 )

  라. html
    랜더링

     ==> jsp는 서버에 저장되고 서버에서 실행되고 동적인 특징을 갖는다.
      즉 항상 동일한 화면이 아닌 동적인 화면을 보여진다.

    3)  servlet 인 경우 ( 자바기술 )

      웹 브라우저    가.요청(Test.java)        웹 컨테이너( Tomcat , 웹서버 기능 포함)
             ------------------------>                           
					Test.java(서블릿)

					나. 요청한 서블릿 검색 
					  - 없는 경우: 404(File Not Found) 에러코드 발생되고
                                                    에러페이지(html)를 사용자에게 보내줌.
					  - 있는 경우: 
                                                 실행 ---> 결과는 html로 만들어짐.
	     <-------------------------
	        다. 응답( html 다운 )

  라. html
    랜더링

     ==> 서블릿은 서버에 저장되고 서버에서 실행되고 동적인 특징을 갖는다.
         즉 항상 동일한 화면이 아닌 동적인 화면을 보여진다.


 2. 요청 URL

   - 필요한 정보
    1) 서버의 주소: IP번호 또는 도메인
                210.103.221.3

    2) port 번호
    3) 타겟 ( test.html, test.jsp, Test.java )
       ==> 폴더를 이용해서 저장가능

    클라이언트                     서버 ( IP: 210.103.221.3 )
                               Apache 웹서버 (port: 80) - 생략가능
			       Tomcat 컨테이너 (port: 8080)
			       MySQL DB 서버 (port: 3306)
			       Oracle DB 서버 (port: 1521)

     최종적인 요청 URL

        http://서버IP:port번호/타겟
	http://서버IP:port번호/폴더/타겟

	https://서버IP:port번호/타겟
	https://서버IP:port번호/폴더/타겟

    예> http://210.103.221.3:80/test.html
       http://210.103.221.3:80/폴더/test.html

3. 환경 설정

  1) node 설치
     
     https://nodejs.org 에서 다운받고 설치 (기본설치)

     cmd 차에서 node -v 입력하고 버전 확인.

  2) VSC 설치
     
     https://code.visualstudio.com/ 에서 다운받고 설치 (기본설치)

     확장패 추가로 설치

4.  웹(web) 개요
  
   - 1991년에 World Wide Web(WWW) 용어가 처음 나옴.
   - 1993년에 웹 표준 단체 창설 ( W3C )
     
       http://www.w3c.org


     기능은 html/css/javascript 표준안 작성. ( 자바의 인터페이스 기능)


     이것은 웹 브라우저에서 실행이 된다. (크롬,엣지, 파이어폭스, .. ) ( 자바의 클래스 기능 )
     결국 html/css/javascript 은 W3C에서 만들고
       이것을 실행하는 웹브라우저는 다른 회사에서 만들기 때문에 
       항상 자신의 웹브라우저가 W3C에서 만든 html/css/javascript 문법을 지원하는지 확인해야 된다.


   - 모질라(Mozilla) 사이트 
    ==> W3C 에서 제안한 표준안을 가장 빠르게 준수해서 가이드 제공.
    ==> https://developer.mozilla.org

       https://developer.mozilla.org/ko/docs/Web/HTML
       https://developer.mozilla.org/ko/docs/Learn/HTML

	https://developer.mozilla.org/ko/docs/Web/CSS	
       https://developer.mozilla.org/ko/docs/Learn/CSS


       https://developer.mozilla.org/ko/docs/Web/JavaScript
       https://developer.mozilla.org/ko/docs/Learn/JavaScript
      
     
     ==> 특정 기능이 모든 브라우저가 제안된 표준안을 준수하는 것은 아니다.
        따라서 모질라(Mozilla) 사이트에서 지원 여부를 확인할 수 있다.


5. 웹 표준

  1)기본개념
    특정 기기(pc,모바일)와 사용자의 상태(시각장애)와 무관하게 누구든지 정보 접근이 가능한 웹을 만들어야 된다.

  2)준수 확인
    https://validator.w3.org

  3)구현 방법
    - 역할분담

    가. 데이터 구조(뼈대)담당
      - html 담당
    나. 디자인 담당
      - css 담당
    다. 동적처리 담당
      - javascript 담당

    ==> 모두 서버쪽에 저장되지만 실행은 서버에서 응답될때 다운로드되어서 클라이언트에서 실행된다.

 
  6. html 개요

    - html ( hyper text markup language )은 웹 페이지를 작성하기 위한 언어.

      hyper text 의미: 링크(link) 의미
      markup language 의미: 정보 표시용 방법으로 태그(<>)로 구성되어 있음.
                          w3c에서 정해진 태그이름이 있음. 예> <div>, <p>


    * XML ( eXtensible Markup Language ) 
      - 확장가능한 마크업 언어로서 태그명을 임의로 지정 가능함. 예> <홍길동>, <ssg>, <person>
        추가로 특정태그의 사용 규칙을 정할 수도 있음.
	규칙을 정하는 2가지 방법은 dtd(*.dtd) 와 xsd(*.xsd) 이다.
      - 용도는 데이터 저장.
        예> 홍길동 20 서울
    
          <person>
	   <name>홍길동</name>
	   <age>20</age>
	   <address>서울</address>
          </person>

      - 주요특징은 플랫폼(OS,프로그램언어등)에 독립적임.
        단점은 데이터를 표현하기 위한 추가적인 데이터(메타데이터)가 필요함.
	해결책으로 나온 방법은 JSON(JavaScript Object Notation) 포맷이다.
	  {name:"홍길동",age:20,address:"서울"}


7. html 특징

  - 태그로 구성
  - 태그는 시작태그와 종료태그로 구성.
    예> <html>
         몸체(body) <== 태그
       </html>

  - 태그는 중첩형태임.

  - 종료태그가 없는 태그도 존재함
    예> <img>, <input>, <br>, <hr>, <link>

  - 몸체(body)가 없는 태그 ( 빈태그(empty) 라고 부름)
    예> <태그></태그> <=== <태그/>

  - 태그명은 소문자 권장
  - 시작태그는 속성을 포함할 수 있고 속성명은 정해져 있음.
    속성명은 모든 태그에서 사용 가능한 전역속성(id, class, style)도 있고
    특정 태그(href, value, ...)에서만 사용하는 속성도 있음.

    <태그명  속성명="속성값"  속성명="속성값" .. >

   예> <p>hello</p>
      <p id="xxx">hello</p> 
      <p id="xxx" class="yyy">hello</p> 

      <a href=""></a>
      <input value="">

  - 속성명을 임의로 지정할 수 있음. (커스텀 속성)
    
     문법:   data-속성명="속성값"

     예> <p id="xxx" data-ssg="" >hello</p> 


8. html 버전

   - html5 버전 사용예정.
     2014년 표준안 채택됨.
   - html 작성시에는 항상 사용할 html 버전을 명시해야 된다.
     이유는 웹 브라우저가 버전을 확인하고 랜더링 한다.

   -  html5 버전설정 방법 ( doctype 이용)
    
      <!DOCTYPE html>

9. html 기본 구조

    <!DOCTYPE html>
    <html>
      <head>
         <title></title>
	 <link>
	 <script></script>
      </head>
      <body>
         <p>Hello1</p>
	 <h1>world</h1>
	 <p>Hello2</p>
	 <a href="daum.net">다음</a>
      </body>
    </html>

  ==> 계층구조가 생김
     웹브라우저는 다음과 같이 메모리에 DOM 트리를 생성하고 랜더링 함.

                  html (root node 라고 부름)
		    |
         head                      body
	  |                           |

title   link  script        p     h1       p           a - href
                            |      |       |           |      |
                       "Hello1"  "world"  "Hello2"    "다음"   "daum.net"

    자식 및 자손, 부모 및 조상, 형제 관계가 존재한다.

    나중에 CSS 또는 JS 이용해서 DOM 트리를 접근할 수 있고 
    스타일 및 DOM 처리(수정,삭제,추가)를 할 수 있다.

10. html 태그 주석

   <!--
       <p>Hello1</p>
    -->

11. head 태그의 자식태그

  1) <title> 태그
     - html 문서의 타이틀 지정용도
     - 웹 브라우저 탭에 보임.
     - 즐겨찾기 할때 저장되는 값임.

////////////////////////////////////////////////////////
   요청 URL 문법:
   http://서버IP:port번호/타겟

   http://127.0.0.1:5500/sample01_head_title.html

   http 는 프로토콜.
   127.0.0.1 는 서버 IP. ( localhost 와 동일 )
   5500 는 port 번호 ( live server의 기본포트 번호 )
   sample01_head_title.html 는 타겟
////////////////////////////////////////////////////////


  2) <style> 태그
    - CSS 설정방법 중 하나에서 사용됨.

    * CSS 설정방법 3가지
     가. 인라인 스타일 ( inline 방법 ) 
        - html태그의 시작태그에서 style 속성을 이용해서 CSS 적용하는 방법.
	예> <p style="color:red">hello</p>
           <div style="color:red">hello</div>

     나. 내부 스타일  ( internal 방법 )
        - <style> 태그내에서 CSS 문법을 이용해서 html 태그를 선택해서 적용하는 방법.
        예>
           <head>
              <style>
                  p{
                    color:red;
		  }
	      </style>
	   </head>

	   <p>hello</p>

     다. 외부 스타일  ( external 방법 )
        - *.css 가진 외부파일로 생성해서 CSS 적용하는 방법.
	  html 에서는 참조해서 사용가능.

	  예>
	      test.css
	          p{
                    color:red;
		  }
 
               sample.html
	       <head>
	        <link rel="stylesheet" href="test.css" >
               </head>


  3) <link> 태그
     - 외부 스타일 ( external ) 지정시 사용.
      예> <link rel="stylesheet" href="test.css" >

     - favicon 경로지정시에도 사용.


  4) <script> 태그
    - 자바스크립트 사용할 때 사용됨.
    - <head> 및 <body> 에서 사용가능.
    - JS 2가지 방법

      가. 내부 (internal)
         예> <script>
               js 코드 구현
	    </script>


      나. 외부 (external)
       - *.js 외부파일로 만듬.
         html 에서는 참조해서 사용가능.

        예> <script src="*.js"></script>
	   <script>
               js 코드 구현
	   </script>

12. body 태그의 자식태그

 ==> html의 모든 태그는 box로 되어있음.
 ///////////////////////////////////////
  box 의 배치방법 2가지

    가. 블럭레벨 
      - 세로배치
      - 너비(width)가 웹 브라우저의 전체 너비를 차지하기 때문에
        이어서 출력되는 태그는 새로운 줄에 랜더링되어 세로배치가 된다.
	그래서 명시적으로 너비(width)와 높이(height)를 변경할 수 있다.
      - 대표: div, p, table, h1~h6, ul, ol, li, tr , br, hr...

    나. 인라인 레벨
     - 가로배치
     - 너비(width)가 자신이 가진 컨텐츠 크기만큼만 확보함.
       그래서 명시적으로 너비(width)와 높이(height)를 변경할 수 없다. (지정해도 적용안됨)
     - 대표: span, a, img ....  

  ==> CSS 를 사용하면 서로간에 변경이 가능하다.

 ////////////////////////////////////////
  1) header 태그
   
    - <h1> ~ <h6>
    - 번호가 작을수록 크게 보임.

     <h1> : 32px
     .
     <h4> : 16px

    -기본폰트 크기는 16px ( 1rem 동일 )

  2) p 태그
   - 문서의 문단(paragraph) 지정 목적

  3) br 태그
    - new line 만들 때 사용.  ( 자바의 \n 기능 )
    - 종료태그 없음 예> <br>

  4) hr 태그
    - 수평선 제공
    - 종료태그 없음 예> <br>

  5) 텍스트 포맷 태그 
   
    <b>굵은 글자</b>  
    <hr>
    <i>이택릭 글자</i> 
    <hr>
    <small>작은 글자</small> 
    <hr>
    <del>취소선 글자</del>
    <hr>
    <ins>밑줄 글자</ins> 
    <hr>
    AAA<sub>아래 글자</sub> 
    <hr>
    AAA<sup>위 글자</sup> 

  6) 리스트

    가. 순서 없는 리스트 ( unordered list: ul ) (************)
        
	<ul>
          <li>A1</li>
          <li>A2</li>
	</ul>

    나. 순서 있는 리스트 ( ordered list : ol )

         <ol>
          <li>A1</li>
          <li>A2</li>
	</ol>

  
   7)  a 태그 ( anchor 태그 )
    
       - 페이지간에 연결(링크)시 사용됨.
       - 인라인 레벨 (가로배치)
       - 기본적으로 링크 색상이 달라진다. ( 방문전: blue, 방문후: purple, 활성화(누르고 있을때): red )
         CSS 이용해서 색상 변경이 가능.
       - 문법:

         <a href="타겟">링크</a>

       - 종류

         가. 외부링크

            <a href="외부파일">링크</a>
	    <a href="http://www.google.com">링크</a>

         나. 내부링크

	    // 링크 설정
            <a href="#java">java로 가기</a>
            <a href="#Sql">Sql로 가기</a>
            ..
	    ..

	    //타겟위치 설정
	    <a id="java">Java</a>
	    <a id="Sql">Sql</a>

         다. 외부링크+내부링크
 
             <a href="target.html#java">링크</a>


       - target 속성
         ==> 링크된 문서를 어디에서 보여줄지를 설정가능.


	   target="_self"  (기본값, 현재 창)
	   target="_blank"  (새로운 창)

     8) table 태그

       문법:
          <table>
            <tr>
               <th>이름</th>
	       <th>나이</th>
	    </tr>
            <tr>
               <td>홍길동</td>
               <td>20</td>
	    </tr>
	  </table>

      
      - 그룹핑 가능 ( 권장함 )

       예>  
          제품명  가격  <== <thead>
           A    100
	   B    200  <== <tbody>
	  총합   300  <== <tfoot>

      - 병합
        
	 가. 열병합
            - colspan="갯수"
 
           예>
	        이름     전화1     전화2
                홍길동    010      011

            ==> 병합후

	        이름         전화
                홍길동    010      011
 
	 나. 행병합
	   - rowspan="갯수"

	   예>
	       이름   홍길동
	       전화1  010
	       전화2  011

	      ==> 병합후

	       이름   홍길동
	              010
               전화번호
	              011

    9) 태그 및 특정값 그룹핑

      가. 태그 그룹핑
	- 전통적으로 <div> 사용. 
	( 현재는 시멘틱 태그( <nav>, <header>, <main>, <footer>, <aside>, <section>,.)와 병행해서 같이 사용됨 )
        - 블럭 레벨 이다. ( 웹 브라우저의 전체 너비(width)를 영역 차지함. width와 height 를 명시적으로 지정하면 적용됨 )

      나. 특정값(문자열) 그룹핑
        - <span> 사용.
	- 인라인 레벨 이다. ( 자신의 컨텐츠 크기만큼만 영역 차지함. width와 height 를 명시적으로 지정해도 적용 안됨 )

    10) 시멘틱 태그 ( sementic tag )

       개념: '의미를 갖는다' 뜻으로 각 태그가 자신만의 특정 의미가 있음을 알려줄 수 있다.
       종류:
         <header> : 웹 사이트 소개 및 정보
	           과거에는 <div id="header">
	 <main>   : 웹 사이트의 메인 항목. 과거에는 <div id="main">
	 <section> : 실제 문서 내용 포함.
	 <article> : 문서 내용이 많을 경우 여러 개의 주제로 묶을 때 사용.
	 <nav>     : 사이트 메뉴
	 <aside>   : 배너 광고 포함.
	 <footer>  : 회사 소개 및 저작권 정보 포함

    11) 사용자 입력 태그 

      가. 단일값 입력
        
	 <input type="text" name="username" >
	 <input type="text" name="username" value="홍길동">

      나. 비번 입력
        
	 <input type="password" name="passwd" >

      다. 체크박스
        - 여러개 선택 가능
        - 처음부터 체크된 상태 가능 ( checked 속성 이용 )

	 <input type="checkbox" name="apple" >
	 <input type="checkbox" name="banana" checked>

      라. 라디오 버튼
        - 한개만 선택 가능하고 반드시 name 값이 동일해야 된다.
	- 처음부터 체크된 상태 가능 ( checked 속성 이용 )

	 <input type="radio" name="gender" checked>  checked="checked" 동일
	 <input type="radio" name="gender" >
 
      마. email 입력
         - 반드시 email 포맷을 지정해야 된다.
	   @ 가 반드시 필요.

	 <input type="email" name="email" >

      바. number, file, date, color 입력

	 <input type="number" name="age" step="2" min="10" max="50">
	 <input type="file" name="file" accept="image/png, image/jpeg, text/html" >
	 <input type="date" name="date" >
	 <input type="color" name="color" >

      사. select 태그

         <select name="fruit">
           <option value="apple">사과</option>
           <option value="banana">바나나</option>
           <option value="melon">멜론</option>
	 </select>

      아. 멀티값 입력
       
         <textarea name="content" rows="5" cols="5">
	  홍길동	
	 </textarea>


     12) 사용자 입력 태그 작성후 입력된 사용자 데이터를 서버에 전달하는 방법. (***************)

        - <form> 태그 이용

	 예>
	     <form action="타겟(서블릿|JSP|html)" method="get(기본)|post">
                아이디: <input type="text" name="userid"> <br>
		비밀번호: <input type="password" name="passwd"> <br>

                <input type="submit" value="로그인">
		<button>로그인2</button>
		<!-- <input type="button" value="로그인3"> 서브밋 안됨 -->
		<input type="reset" value="취소" />
	     </form>

	 submit 하면 action에 지정된 타겟으로 요청이 된다.
	 이때 사용자 입력 데이터는 기본적으로 웹 브라우저의 URL 이용해서 전달(get방식)된다.
	 또 다른 방법은 URL 이용하지 않고 숨겨서 전달되는 방식(post방식)도 있다. ( method 속성이용)
	 형식은 다음과 같다.

	 http://localhost:port/타겟?tag의name값=사용자입력값&tag의name값=사용자입력값&tag의name값=사용자입력값...

	 예> http://localhost:5500/target.html?userid=aaa&passwd=1234


	   userid=aaa&passwd=1234 <== query string 이라고 부른다.
	                              그리고 query string은 URL에 포함안됨.


       - 클라이언트(웹 브라우저)에서 서버로 요청(새로고침, a 태그 이용한 링크, 
                                       직접 웹브라우저에서 url 입력후 엔터,
                                       form 태그 이용한 사용자 입력 데이터를 전달)하는 2가지 방법

           가. GET 방식
	     - 기본 방식
             - 사용자 입력데이터는 URL에  query string 형식으로 전달된다.
              다음은 요청했을 때 서버에 전달되는 데이터 구조이다.
                header: 
		         url 정보 http://localhost:5500/target.html?userid=aaa&passwd=1234
                         host정보
			 웹브라우저 정보( user-agent )
			 ..
	         -------------
                body  :
               (payload 탭확인 가능 )

             - 멱등성이 있음. ( 멱등성? 클라이언트에서 동일한 요청을 여러번 했을 때 서버에서 변경사항이 발생되지 않음 )

	   나. POST 방식
	      - 사용자 입력데이터는 URL에 포함되지 않고 body 에 숨겨셔서 전달된다.
              다음은 요청했을 때 서버에 전달되는 데이터 구조이다.
                header: 
		         url 정보 http://localhost:5500/target.html
                         host정보
			 웹브라우저 정보( user-agent )
			 ..
	         -------------
                body  :  userid=aaa&passwd=1234
               (payload 탭확인 가능 )

              - 멱등성이 없음. 
	        이유는 post는 새로운 데이터를 생성(insert)할 때 주로 사용되는 요청방식이기 때문이다.



     //////////////////////////////////////////////////////////////////////
           * 요청 method 방식이 일치하는 경우

	    브라우저                    서버
 	                              target.html
            
	    직접 ULR 이용 (get방식)-------------> target.html(get만 가능)

                                     요청방법이 일치안됨( 405 에러 발생 )
	    form 에서 method="post" -------------> target.html(get만 가능)
     //////////////////////////////////////////////////////////////////////


  13) image 보기

    문법:
     
        <img src="이미지파일" alt="대체 텍스트" width="" height="">

   14) 화면 재사용
      - 외부 html 파일을 이용해서 화면 처리

      <iframe src="외부 html 파일"> </iframe>

   
   15) 특수문자
     - 기본적으로 html에서는 탭이나 스페이스바가 적용안됨.

     공백: &nbsp;
     <  : &lt;
     >  : &gt;
     "  : &quot;
     &  : &amp;

   
   16) 경로 (******************)

    http://127.0.0.1:5500/target.html

      - 개념:
          현재 html(css,js)에서 외부 파일( html,css,js, image 등 )을 참조할 때 위치(경로)를 알려주는 방법.

      - 경로지정 방법 2가지

       예>  http://127.0.0.1:5500/images/a.jpg
             http://127.0.0.1:5500/external.js
	     http://127.0.0.1:5500/external.css
	     
	     <img src="http://127.0.0.1:5500/images/a.jpg" >
             <script src="http://127.0.0.1:5500/external.js"></script>
	     <link rel="stytlsheet" href="http://127.0.0.1:5500/external.css" >


       가. 절대 경로
         -  반드시 / 로 시작한다. <== http://127.0.0.1:5500/  동일
	   즉 / 기준임.

	     <script src="http://127.0.0.1:5500/01_html2/app1/test.js"></script>
	     <script src="/01_html2/app1/test.js"></script>

       나. 상대 경로
         - . 또는  .. 로 시작한다.
	   . : 현재 디렉터리
	   ..: 부모 디렉터리
          기준은 현재 화면에 보여지는 경로 기준임.


   # full url 경로
   http://127.0.0.1:5500/01_html2/main/main.html


   http://127.0.0.1:5500/01_html2/app1/sample.html
   http://127.0.0.1:5500/01_html2/app1/test.js
   http://127.0.0.1:5500/01_html2/app1/test.css
   http://127.0.0.1:5500/01_html2/app1/images/a.jpg