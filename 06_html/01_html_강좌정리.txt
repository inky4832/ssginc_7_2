html 강좌정리

1. web 아키텍쳐 ( web architecture )


 클라이언트(client:사용자)                         서버(server:클라이언트에게 서비스 기능 ) 예> 쿠팡,....
 -------------------                         ---------------------------------
 도구: 웹브라우저                                 도구: 웹서버(web server)
                     요청(url에 주소입력)
                   ------------------------->  요청에 대한 처리실행후 결과를 만듬.
		   <-------------------------
		     응답(html 결과를 리턴)
		                               웹컴포넌트(web component)
					       - html: *.html, 정적 컴포넌트(항상 결과가 동일)
					       - jsp : *.jsp, 동적 컴포넌트(결과가 달라짐), 자바기술
					       - servlet: *.java, 동적 컴포넌트(결과가 달라짐), 자바기술


 1) html 인 경우


     웹 브라우저    가.요청(test.html)        웹서버( Apache, IIS, ngnix,..)
             ------------------------>                           
					test.html

					나. 요청한 html 검색 
					  - 없는 경우: 404(File Not Found) 에러코드 발생되고
                                                    에러페이지(html)를 사용자에게 보내줌.
					  - 있는 경우: 찾은 test.html를 사용자에게 보내줌.
	     <-------------------------
	        다. 응답( test.html 다운 )

  라. test.html
    랜더링

   ==> html은 서버에 저장하지만 클라이언트(프런트엔드)에서 실행되고 정적인 특징을 갖는다.
      즉 항상 동일한 화면이 보여진다.


   2)  jsp 인 경우 ( 자바기술 )

      웹 브라우저    가.요청(test.jsp)        웹 컨테이너( Tomcat , 웹서버 기능 포함)
             ------------------------>                           
					test.jsp

					나. 요청한 jsp 검색 
					  - 없는 경우: 404(File Not Found) 에러코드 발생되고
                                                    에러페이지(html)를 사용자에게 보내줌.
					  - 있는 경우: 3가지 단계를 거침
                                              1단계: 변환단계
					         test.jsp ------> test_jsp.java

				              2단계: 컴파일 단계
					        test_jsp.java ------> test_jsp.class

                                              3단계: 실행 단계
                                                 test_jsp.class ---> 결과는 html로 만들어짐.
	     <-------------------------
	        다. 응답( html 다운 )

  라. html
    랜더링

     ==> jsp는 서버에 저장되고 서버에서 실행되고 동적인 특징을 갖는다.
      즉 항상 동일한 화면이 아닌 동적인 화면을 보여진다.

    3)  servlet 인 경우 ( 자바기술 )

      웹 브라우저    가.요청(Test.java)        웹 컨테이너( Tomcat , 웹서버 기능 포함)
             ------------------------>                           
					Test.java(서블릿)

					나. 요청한 서블릿 검색 
					  - 없는 경우: 404(File Not Found) 에러코드 발생되고
                                                    에러페이지(html)를 사용자에게 보내줌.
					  - 있는 경우: 
                                                 실행 ---> 결과는 html로 만들어짐.
	     <-------------------------
	        다. 응답( html 다운 )

  라. html
    랜더링

     ==> 서블릿은 서버에 저장되고 서버에서 실행되고 동적인 특징을 갖는다.
         즉 항상 동일한 화면이 아닌 동적인 화면을 보여진다.


 2. 요청 URL

   - 필요한 정보
    1) 서버의 주소: IP번호 또는 도메인
                210.103.221.3

    2) port 번호
    3) 타겟 ( test.html, test.jsp, Test.java )
       ==> 폴더를 이용해서 저장가능

    클라이언트                     서버 ( IP: 210.103.221.3 )
                               Apache 웹서버 (port: 80) - 생략가능
			       Tomcat 컨테이너 (port: 8080)
			       MySQL DB 서버 (port: 3306)
			       Oracle DB 서버 (port: 1521)

     최종적인 요청 URL

        http://서버IP:port번호/타겟
	http://서버IP:port번호/폴더/타겟

	https://서버IP:port번호/타겟
	https://서버IP:port번호/폴더/타겟

    예> http://210.103.221.3:80/test.html
       http://210.103.221.3:80/폴더/test.html

3. 환경 설정

  1) node 설치
     
     https://nodejs.org 에서 다운받고 설치 (기본설치)

     cmd 차에서 node -v 입력하고 버전 확인.

  2) VSC 설치
     
     https://code.visualstudio.com/ 에서 다운받고 설치 (기본설치)

     확장패 추가로 설치

4.  웹(web) 개요
  
   - 1991년에 World Wide Web(WWW) 용어가 처음 나옴.
   - 1993년에 웹 표준 단체 창설 ( W3C )
     
       http://www.w3c.org


     기능은 html/css/javascript 표준안 작성. ( 자바의 인터페이스 기능)


     이것은 웹 브라우저에서 실행이 된다. (크롬,엣지, 파이어폭스, .. ) ( 자바의 클래스 기능 )
     결국 html/css/javascript 은 W3C에서 만들고
       이것을 실행하는 웹브라우저는 다른 회사에서 만들기 때문에 
       항상 자신의 웹브라우저가 W3C에서 만든 html/css/javascript 문법을 지원하는지 확인해야 된다.


   - 모질라(Mozilla) 사이트 
    ==> W3C 에서 제안한 표준안을 가장 빠르게 준수해서 가이드 제공.
    ==> https://developer.mozilla.org

       https://developer.mozilla.org/ko/docs/Web/HTML
       https://developer.mozilla.org/ko/docs/Learn/HTML

	https://developer.mozilla.org/ko/docs/Web/CSS	
       https://developer.mozilla.org/ko/docs/Learn/CSS


       https://developer.mozilla.org/ko/docs/Web/JavaScript
       https://developer.mozilla.org/ko/docs/Learn/JavaScript
      
     
     ==> 특정 기능이 모든 브라우저가 제안된 표준안을 준수하는 것은 아니다.
        따라서 모질라(Mozilla) 사이트에서 지원 여부를 확인할 수 있다.


5. 웹 표준

  1)기본개념
    특정 기기(pc,모바일)와 사용자의 상태(시각장애)와 무관하게 누구든지 정보 접근이 가능한 웹을 만들어야 된다.

  2)준수 확인
    https://validator.w3.org

  3)구현 방법
    - 역할분담

    가. 데이터 구조(뼈대)담당
      - html 담당
    나. 디자인 담당
      - css 담당
    다. 동적처리 담당
      - javascript 담당

    ==> 모두 서버쪽에 저장되지만 실행은 서버에서 응답될때 다운로드되어서 클라이언트에서 실행된다.

 
  6. html 개요

    - html ( hyper text markup language )은 웹 페이지를 작성하기 위한 언어.

      hyper text 의미: 링크(link) 의미
      markup language 의미: 정보 표시용 방법으로 태그(<>)로 구성되어 있음.
                          w3c에서 정해진 태그이름이 있음. 예> <div>, <p>


    * XML ( eXtensible Markup Language ) 
      - 확장가능한 마크업 언어로서 태그명을 임의로 지정 가능함. 예> <홍길동>, <ssg>, <person>
        추가로 특정태그의 사용 규칙을 정할 수도 있음.
	규칙을 정하는 2가지 방법은 dtd(*.dtd) 와 xsd(*.xsd) 이다.
      - 용도는 데이터 저장.
        예> 홍길동 20 서울
    
          <person>
	   <name>홍길동</name>
	   <age>20</age>
	   <address>서울</address>
          </person>

      - 주요특징은 플랫폼(OS,프로그램언어등)에 독립적임.
        단점은 데이터를 표현하기 위한 추가적인 데이터(메타데이터)가 필요함.
	해결책으로 나온 방법은 JSON(JavaScript Object Notation) 포맷이다.
	  {name:"홍길동",age:20,address:"서울"}


7. html 특징

  - 태그로 구성
  - 태그는 시작태그와 종료태그로 구성.
    예> <html>
         몸체(body) <== 태그
       </html>

  - 태그는 중첩형태임.

  - 종료태그가 없는 태그도 존재함
    예> <img>, <input>, <br>, <hr>, <link>

  - 몸체(body)가 없는 태그 ( 빈태그(empty) 라고 부름)
    예> <태그></태그> <=== <태그/>

  - 태그명은 소문자 권장
  - 시작태그는 속성을 포함할 수 있고 속성명은 정해져 있음.
    속성명은 모든 태그에서 사용 가능한 전역속성(id, class, style)도 있고
    특정 태그(href, value, ...)에서만 사용하는 속성도 있음.

    <태그명  속성명="속성값"  속성명="속성값" .. >

   예> <p>hello</p>
      <p id="xxx">hello</p> 
      <p id="xxx" class="yyy">hello</p> 

      <a href=""></a>
      <input value="">

  - 속성명을 임의로 지정할 수 있음. (커스텀 속성)
    
     문법:   data-속성명="속성값"

     예> <p id="xxx" data-ssg="" >hello</p> 


8. html 버전

   - html5 버전 사용예정.
     2014년 표준안 채택됨.
   - html 작성시에는 항상 사용할 html 버전을 명시해야 된다.
     이유는 웹 브라우저가 버전을 확인하고 랜더링 한다.

   -  html5 버전설정 방법 ( doctype 이용)
    
      <!DOCTYPE html>

9. html 기본 구조

    <!DOCTYPE html>
    <html>
      <head>
         <title></title>
	 <link>
	 <script></script>
      </head>
      <body>
         <p>Hello1</p>
	 <h1>world</h1>
	 <p>Hello2</p>
	 <a href="daum.net">다음</a>
      </body>
    </html>

  ==> 계층구조가 생김
     웹브라우저는 다음과 같이 메모리에 DOM 트리를 생성하고 랜더링 함.

                  html (root node 라고 부름)
		    |
         head                      body
	  |                           |

title   link  script        p     h1       p           a - href
                            |      |       |           |      |
                       "Hello1"  "world"  "Hello2"    "다음"   "daum.net"

    자식 및 자손, 부모 및 조상, 형제 관계가 존재한다.

    나중에 CSS 또는 JS 이용해서 DOM 트리를 접근할 수 있고 
    스타일 및 DOM 처리(수정,삭제,추가)를 할 수 있다.

10. html 태그 주석

   <!--
       <p>Hello1</p>
    -->