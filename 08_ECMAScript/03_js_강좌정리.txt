JS 강좌정리

1. JS(JavaScript) 개요

  - java 언어와 무관.
  - 서버에 저장하지만 웹브라우저에서 실행됨.

     웹브라우저에는 2 가지 엔진
     a. html 랜더링하는 엔진
     b. JS 실행하는 엔진 ( 크롬: v8 )

     
    구글에서 V8엔진을 가진 서버를 만듬: node.js


      클라이언트(웹브라우저)             서버(node.js)
       v8                          v8
     
    현재는 웹브라우저 및 서버(node.js)에서도 JS를 실행시킬 수 있다.
  
  - 표준화된 JS ( 2015년 )
   ==> ECMAScript6 (ES6)
   ==> 표준화 안된 JS는 ECMAScript5 이다.

 2. JS 특징
   - 인터프리터 언어 ( 컴파일 없이 한 줄 씩 실행 )
   - 변수선언시 데이터 타입을 지정 안함.
   - 대소문자 구별함.
   - 웹 브라우저 및 서버(node.js)에서 실행
   - html에 포함되어 JS가 실행됨. ( <script> 태그 이용 )
   - java 언어 처럼 일반적인 프로그램언어가 가진 특징을 모두 갖음
     ( 데이터 종류, 변수, 연산자, 제어문(조건문,반복문), 클래스, 함수(메서드역할),...)
   - JS 주석문은 자바와 동일 
     // 한줄 주석문
     /*
        멀티 주석문
     */
    - 웹브라우저의 console 값 출력 방법
      console.log(값, 값2,...);
   
 3. html에 JS 설정하는 방법
  
  - <script> 이용.

   1) <head> 내에 <script> 설정
     예>
          <head>
            <script>
               //JS 코드
	    </script>
	  </head>

   2) <body> 내에 <script> 설정
      예>
          <body>
	    //html 태그 
	    ...
	    ..
            <script>
               //JS 코드
	    </script>
	  </body>

   3) 외부파일로 설정 + <head> 내에 <script> 로 참조
         test.js
       예>
          <head>
            <script src="test.js"></script>
	     <script>
               //JS 코드
	     </script>
	  </head>


 4. 식별자 ( identifier )

   - 개념: JS 코드내의 단어 의미.
   - 대소문자 구별함.
   - 첫글자는 반드시 영문자 또는 _ 또는 $ 만 지정 가능.
     이후에는 숫자지정 가능.
   - 자바처럼 시스템 정의 식별자(예약어, 키워드)도 있고 
           사용자 정의 식별자( 변수명, 상수명,  함수명, 클래스명)도 가능하다.

     변수명: 모두 소문자 권장
     상수명: 모두 대문자 권장
     함수명: 모두 소문자 권장
     클래스명: 첫글자 대문자

4. 데이터 종류 ( 외우기 )

   1) 기본 데이터형
    
      - 수치 데이터: 정수와 실수 포함. ( Number 객체가 관리 )
                 리터럴 표현: 10 , 3.14
      - 문자 데이터: 문자와 문자열 포함 ( String 객체가 관리 )
                 리터럴 표현: '홍길동' 및 "홍길동" 모두 가능한 표현법이다.
      - 논리 데이터: 참/거짓 ( Boolean 객체가 관리 )
                 리터럴 표현: true, false
		          단, JS는 true/false 및 다른 값도 논리값으로 사용이 가능하다. (********)
			   결국  true/false 및 다른 값도 조건문 및 논리연산자 ( &&, ||, ! )에 사용이 가능하다. 
			     예> if 문 및  100 && 200
		 * false 로 처리되는 값
		  - 0 
		  - ""
		  - null
		  - undefined
		  - NaN
 
                  위 5가지 이외의 값은 true로 처리될 수 있다.
		   예> 10, "홍길동"

      - undefined : 변수가 선언후 초기화 안된 상태.  ( Object 객체가 관리 )
      - null      : 변수가 선언후 초기화 된 상태인데 값 없음을 의미.  ( Object 객체가 관리 )
      - NaN    : Not a Number ( Number 객체가 관리 )
                 일반적으로 숫자가 아닌 문자열형태의 값을 숫자로 변경할 때 발생될 수 있음.
		  
		 자바: Integer.parseInt("10"); ==> 10
		 JS:  Number.parseInt("10")===> 10

		      Number.parseInt("홍길동")===> NaN

   2) 참조 데이터형

     - 배열(객체):  [값, 값2, .. ]
     - JSON(객체):  JSON(JavaScript Object Notation )
                  {key:value, key:value,...}

     - 함수(function)(객체):  자바의 메서드 기능. ( 람다 표현식 )
                       예> Function f = (n)=> n+ 20;
		           Predicate p = 람다표현식;
		           list.stream().filter(p)
		          데이터타입 변수명 = 람다;
               문법: function 함수명(변수,...){
		      문장
		      return 값;
		  }    

		  함수명(값,..)
		  
	 ==> JS의 함수는 데이터로 처리된다.
	    따라서 변수에 저장하거나 리턴값으로 사용하거나 함수호출시 인자값(arguments)으로 사용이 가능하다. (***********)
            위 3가지 특징을 갖는 함수(객체)를  일급객체(first-class)라고 부른다. 
	    일급객체 프로그램언어: JS, python, 자바(람다표현식)

     - 클래스(class) : 자바의 접근지정자는 지원안됨.

                 문법:  class 클래스명{
		         //생성자
			 //메서드
		     }

		     new 클래스명();

5.  typeof 연산자

   - 용도: 데이터 타입을 알수 있음.
   - 문법:
         typeof 값  <== 문자열로 데이터타입을 반환.


6. 변수 ( variable )

   1) 변수 용도
     - 데이터 저장

   2) JS 변수 특징
     - 데이터형(타입)을 지정하지 않음.
       결국 임의의 변수에 저장하는 데이터타입을 제한할 수 없다.
       즉 하나의 변수에 모든 데이터를 저장할 수 있음.
       ( 개발자 입장에서 매우 안좋다. 해결: TypeScript 등장 )
   
   3) 문법 2가지

     가.  var 키워드 이용
         - OLD 버전
	 - 문법:
	       var 변수명;   // 변수 선언, undefined 저장됨
		변수명=값;     // 변수 초기화

	       var 변수명=값;  // 변수 선언 및 초기화

	 - 특징: 중복가능.
	        함수 스코프를 따른다.( 함수에서 사용하는 {} 안에서 선언하면 밖에서는 사용 불가.
		                 다른 문법(if,for)에서 사용하는 {} 안에서 선언하면 밖에서도 사용 가능 )
	        

     나.  let 키워드 이용 ( 권장 )
         - ES6 
	 - 문법:
	        let 변수명;   // 변수 선언, undefined 저장됨
		변수명=값;     // 변수 초기화

	        let 변수명=값;  // 변수 선언 및 초기화

        - 특징: 중복 불가
	       블럭 스코프를 따른다. 
	       ( 자바와 동일하게 함수 및 다른 문법(if,for)에서 사용하는 {} 안에서 선언하면 밖에서는 사용 불가.)


7.  기본형 변수 vs 참조형 변수

   1) 기본형 변수
     - 기본형 데이터를 저장하는 변수

      예>
          let n = 10;


   2) 참조형 변수
     - 참조형 데이터를 저장하는 변수

     예>
          let n2 = [10,20,30];


8. 상수
  - ES6 
  - 문법:

      const 상수명 = 값;

 - 특징:
    값 변경이 불가
    상수명 중복 불가
    블럭스코프 
    Front-end 프레임워크( React.js(facebook), Vue.js(개발자), Angular(google) )에서 매우 많이 사용됨.
   
   // 상수 주의할 점
        const m =[10,20,30];

         m[0]=100;  // 배열의 요소값 변경은 가능. m에 저장된 주소값이 변경되는 것이 아니기 때문이다. 
                    // 따라서 JS는 m 변수가 변경되었다고 생각하지 않는다.

         console.log(m)
        //  m =[1,2,3];  //Assignment to constant variable, m에 저장된 주소값이 변경되기 때문이다.
                        // 따라서 JS는 m 변수가 변경되었다고 생각하기 때문에 에러가 발생된다.


9. 연산자

  가. 산술연산자

    +
    -
    *
    / : 소수점까지 출력
    % : 나머지

   문자열로 된 숫자와의 연산이 가능하다. 
   즉 + 제외한 나머지 연산자는 자동으로 형변환 되어 연산이 된다.

   예>  "10" + 3 <== 문자열로 연결
       "10" - 3 <== 연산됨
       "10" * 3 <== 연산됨
       "10" / 3 <== 연산됨
       "10" % 3 <== 연산됨
     

   나. 대입 연산자
      a=b;
      a += b;
      a -= b;
      a *= b;
      a /= b;
      a %= b;
